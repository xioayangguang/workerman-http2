// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0--rc1
// source: hello.proto

// 版本声明，使用Protocol Buffers v3版本

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Greeter_SayHello_FullMethodName       = "/pb.Greeter/SayHello"
	Greeter_ClientSayHello_FullMethodName = "/pb.Greeter/ClientSayHello"
	Greeter_ServerSayHello_FullMethodName = "/pb.Greeter/ServerSayHello"
	Greeter_DoubleSayHello_FullMethodName = "/pb.Greeter/DoubleSayHello"
)

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// SayHello 方法
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	ClientSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSayHelloClient, error)
	ServerSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_ServerSayHelloClient, error)
	DoubleSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_DoubleSayHelloClient, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Greeter_SayHello_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ClientSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_ClientSayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[0], Greeter_ClientSayHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterClientSayHelloClient{stream}
	return x, nil
}

type Greeter_ClientSayHelloClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterClientSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterClientSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterClientSayHelloClient) CloseAndRecv() (*HelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) ServerSayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (Greeter_ServerSayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[1], Greeter_ServerSayHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServerSayHelloClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Greeter_ServerSayHelloClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterServerSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterServerSayHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterClient) DoubleSayHello(ctx context.Context, opts ...grpc.CallOption) (Greeter_DoubleSayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &Greeter_ServiceDesc.Streams[2], Greeter_DoubleSayHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterDoubleSayHelloClient{stream}
	return x, nil
}

type Greeter_DoubleSayHelloClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greeterDoubleSayHelloClient struct {
	grpc.ClientStream
}

func (x *greeterDoubleSayHelloClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterDoubleSayHelloClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// SayHello 方法
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	ClientSayHello(Greeter_ClientSayHelloServer) error
	ServerSayHello(*HelloRequest, Greeter_ServerSayHelloServer) error
	DoubleSayHello(Greeter_DoubleSayHelloServer) error
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGreeterServer) ClientSayHello(Greeter_ClientSayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSayHello not implemented")
}
func (UnimplementedGreeterServer) ServerSayHello(*HelloRequest, Greeter_ServerSayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSayHello not implemented")
}
func (UnimplementedGreeterServer) DoubleSayHello(Greeter_DoubleSayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleSayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Greeter_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ClientSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).ClientSayHello(&greeterClientSayHelloServer{stream})
}

type Greeter_ClientSayHelloServer interface {
	SendAndClose(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterClientSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterClientSayHelloServer) SendAndClose(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterClientSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Greeter_ServerSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServer).ServerSayHello(m, &greeterServerSayHelloServer{stream})
}

type Greeter_ServerSayHelloServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greeterServerSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterServerSayHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Greeter_DoubleSayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServer).DoubleSayHello(&greeterDoubleSayHelloServer{stream})
}

type Greeter_DoubleSayHelloServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greeterDoubleSayHelloServer struct {
	grpc.ServerStream
}

func (x *greeterDoubleSayHelloServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterDoubleSayHelloServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Greeter_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientSayHello",
			Handler:       _Greeter_ClientSayHello_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerSayHello",
			Handler:       _Greeter_ServerSayHello_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleSayHello",
			Handler:       _Greeter_DoubleSayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hello.proto",
}
